# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.5.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QTn-NlicOFMmnJEA3IPJGnpih-Nla_W5

ФИО:
"""

Лобова Кристина Михайловна

"""# **Задание 1**

Дан словарь, содержащий имена и возраст людей, напишите программу выводящую возраст человека по имени

Дано:

```
{"Alice": 25, "Bob": 30, "Charlie": 35}
```

Вввод:


```
Alice
```

Вывод:


```
Alice 25
```
"""

dict={"Alice": 25, "Bob": 30, "Charlie": 35}
name=input('Введите имя человека, возраст которого хотите узнать:')
if name in dict:
    print(name,dict[name])
if name not in dict:
    print('Такого имени нет.')

"""# **Задание 2**

Дан список, состоящий из целых чисел, необходимо написать функцию считающую сумму всех положительных четных чисел списка

Ввод:

```
1, 2, 3, 4, 5, 6, 7, 8, 9
```

Вывод:


```
20
```

***Запрещено:***

*   Использование готовых функций для суммирования чисел
"""

numbers=input('Введите ряд чисел через запятую:')
numbers=numbers.split(',')
summ=0
for number in numbers:
    number=int(number)
    if number>0 and number%2==0:
        summ+=number
    else:
        continue
print(summ)

"""# **Задание 3**

Дан словарь, содержащий название фрукта и его цвет, выведите список всех желтых фруктов


Дано:

```
fruits_and_colors = {
    "apple": "red",
    "banana": "yellow",
    "mango": "yellow",
    "orange": "orange",
    "lemon": "yellow",
    "grape": "purple"
}
```

Вывод:


```
Yellow fruits:
banana
lemon
mango
```
"""

fruits_and_colors = {
    "apple": "red",
    "banana": "yellow",
    "mango": "yellow",
    "orange": "orange",
    "lemon": "yellow",
    "grape": "purple"
}
yellow_fruits=[]
for fruit,color in fruits_and_colors.items():
    if color=='yellow':
        yellow_fruits.append(fruit)
print('Yellow fruits:')
for item in yellow_fruits:
    print(item)

"""# **Задание 4**

Дан словарь, необходимо написать функцию меняющую ключ и значение местами

Дано:


```
{"a": 1, "b": 2, "c": 3}
```

Вывод:

```
{1: 'a', 2: 'b', 3: 'c'}
```
"""

dict={"a": 1, "b": 2, "c": 3}
reverse=''
for item1,item2 in dict.items():
    reverse=reverse+str(item2)+':'+' '+"'"+str(item1)+"'"+','+' '
reverse=reverse[:-2]
print('{'+reverse+'}')

"""# **Задание 5**

Дан список слов, неограниченной длинны, сформируйте словарь, где в качестве ключа будет слово, а в качестве значения количество символов

**Критерии**


*   Словарь необходимо отсортировать по убыванию количества элементов в списке.
*   Подсчет элементов должен быть реализован в отдельной функции
*   Сортировка пары `ключ:значение` должна быть реализована также в виде отдельной функции




Дано:
```
['apple','banana','orange','apple','apple','banana']
```


Вывод:
```
{'apple':3, 'banana': 2, 'orange': 1}
```

***Запрещено:***

*   Использование готовых функций для сортировки словаря
*   Использование готовых функций для подсчета элементов
"""

my_list=['apple','banana','orange','apple','apple','banana']
set=set()
def count(a):
    global my_dict
    my_dict={}
    cnt=0
    for each_word in a:
        set.add(each_word)
    for word1 in set:
        for word2 in a:
            if word1==word2:
                cnt+=1
        my_dict[word1]=cnt
        cnt=0
def dict_sort(b):
    items = list(b.items())
    n = len(items)
    for i in range(n):
        for j in range(n-1):
            if items[j][1] < items[j+1][1]:
                items[j],items[j+1] = items[j+1],items[j]
    print(dict(items))

count(my_list)
dict_sort(my_dict)

"""# **Задание 6**

Дан словарь, содержащий информацию о людях, необходимо:



*   Вывести всех людей старше 30 лет
*   Вывести список городов и количество людей из словаря проживающих в них
*   Вывести список профессий и список людей для каждой профессии

**Критерии**

Каждый из пунктов необходимо реализовать в виде функции
"""

people_info = {
    "Alice": {"age": 25, "city": "New York", "occupation": "Engineer"},
    "Bob": {"age": 30, "city": "Los Angeles", "occupation": "Designer"},
    "Charlie": {"age": 35, "city": "Chicago", "occupation": "Teacher"},
    "Diana": {"age": 28, "city": "Miami", "occupation": "Doctor"},
    "Ethan": {"age": 40, "city": "Seattle", "occupation": "Chef"},
    "Frank": {"age": 32, "city": "Atlanta", "occupation": "Lawyer"},
    "Gabriella": {"age": 29, "city": "San Francisco", "occupation": "Software Engineer"},
    "Harrison": {"age": 38, "city": "Denver", "occupation": "Architect"},
    "Isabella": {"age": 26, "city": "Washington D.C.", "occupation": "Journalist"},
    "Julian": {"age": 42, "city": "Miami", "occupation": "Musician"},
    "Kate": {"age": 31, "city": "Philadelphia", "occupation": "Nurse"},
    "Lucas": {"age": 36, "city": "Nashville", "occupation": "Businessman"},
    "Mia": {"age": 27, "city": "Atlanta", "occupation": "Artist"},
    "Natalie": {"age": 39, "city": "Portland", "occupation": "Writer"},
    "Oliver": {"age": 44, "city": "Minneapolis", "occupation": "Professor"},
    "Penelope": {"age": 33, "city": "San Diego", "occupation": "Marketing Manager"},
    "Quincy": {"age": 41, "city": "Nashville", "occupation": "Singer"},
    "Rachel": {"age": 34, "city": "Cleveland", "occupation": "Teacher"},
    "Sophia": {"age": 29, "city": "Nashville", "occupation": "Engineer"},
    "Tessa": {"age": 37, "city": "Miami", "occupation": "Lawyer"}
}

people_info = {
    "Alice": {"age": 25, "city": "New York", "occupation": "Engineer"},
    "Bob": {"age": 30, "city": "Los Angeles", "occupation": "Designer"},
    "Charlie": {"age": 35, "city": "Chicago", "occupation": "Teacher"},
    "Diana": {"age": 28, "city": "Miami", "occupation": "Doctor"},
    "Ethan": {"age": 40, "city": "Seattle", "occupation": "Chef"},
    "Frank": {"age": 32, "city": "Atlanta", "occupation": "Lawyer"},
    "Gabriella": {"age": 29, "city": "San Francisco", "occupation": "Software Engineer"},
    "Harrison": {"age": 38, "city": "Denver", "occupation": "Architect"},
    "Isabella": {"age": 26, "city": "Washington D.C.", "occupation": "Journalist"},
    "Julian": {"age": 42, "city": "Miami", "occupation": "Musician"},
    "Kate": {"age": 31, "city": "Philadelphia", "occupation": "Nurse"},
    "Lucas": {"age": 36, "city": "Nashville", "occupation": "Businessman"},
    "Mia": {"age": 27, "city": "Atlanta", "occupation": "Artist"},
    "Natalie": {"age": 39, "city": "Portland", "occupation": "Writer"},
    "Oliver": {"age": 44, "city": "Minneapolis", "occupation": "Professor"},
    "Penelope": {"age": 33, "city": "San Diego", "occupation": "Marketing Manager"},
    "Quincy": {"age": 41, "city": "Nashville", "occupation": "Singer"},
    "Rachel": {"age": 34, "city": "Cleveland", "occupation": "Teacher"},
    "Sophia": {"age": 29, "city": "Nashville", "occupation": "Engineer"},
    "Tessa": {"age": 37, "city": "Miami", "occupation": "Lawyer"}
}


def age(a):
    print('Люди старше 30:')
    for i,j in a.items():
        if j['age']>30:
            print(i)

def city(b):
    all_cities={}
    for k in b.values():
        city=k['city']
        all_cities[city]=all_cities.get(city,0)+1
    print(all_cities)

def occupation(c):
    all_occupations={}
    for l,m in c.items():
        occupation=m.get('occupation')
        if occupation in all_occupations:
            all_occupations[occupation].append(l)
        if occupation not in all_occupations:
            all_occupations[occupation]=[l]
    for n,o in all_occupations.items():
        line=''
        for p in o:
            line+=p+', '
        print(n,':',line[:-2])

age(people_info)
print('')
city(people_info)
print('')
occupation(people_info)

"""# **Задание 7**

Задание: Разработка системы отзывов о предметах

Описание: Создать программу на Python для хранения и управления отзывами о предметах учебного курса. Программа должна позволять пользователям добавлять, просматривать и удалять отзывы, а также вычислять средний балл по заданному предмету.

**Функционал:**

*   Добавление отзыва и оценки:
   *   Пользователь может ввести название предмета, оценку (от 1 до 5) и текст отзыва.
   *   Отзывы должны храниться в структуре данных (например, словаре), где ключом будет название предмета, а значением - список отзывов (каждый отзыв может хранить оценку и комментарий).
*   Просмотр отзывов и оценок:
   *   Пользователь может запросить отзывы для указанного предмета.
   *   Если для указанного предмета есть отзывы, программа должна отобразить список всех отзывов и соответствующих оценок.
*   Удаление отзыва:
   *   Пользователь может удалить отзыв по индексу. Необходимо заранее уведомить пользователя о том, какие отзывы доступны для удаления.
   *   Программа должна обработать ситуацию, когда индекс введен неправильно.
*   Вычисление среднего балла по предмету:
   *   Пользователь может ввести название предмета, и программа должна вычислить и вывести средний балл по всем отзывам для этого предмета.
   *   Если отзывов нет, программа должна сообщить об этом.


**Критерии:**

*   Код должен быть оформлен в виде функций
*   Необходимо обрабатывать неправильный ввод пользователя
*   Должны быть комментарии к функциям
*   Присутсвует весь дополнительный функционал



**Опционально:**

Предлагаю вам добавить свои критерии оценки или вопросы, на которые должен ответить студент, чтобы оценить пару
"""

print('Отзывы о предметах учебного курса.\n Выберите функцию:')
result={}

def subjects(subject,rang,feedback):#Добавление отзыва с оценкой для предмета
    if int(rang) in range(1,6):
        if subject in result:
            result[subject].append([rang,feedback])
        if subject not in result:
            result[subject]=[]
            result[subject].append([rang,feedback])
        print(result)
        print(f'Оставлен отзыв на предмет {subject}: Ваша оценка {rang}, ваш отзыв: {feedback}')
    if int(rang) not in range(1,6):
        print(f'Кажется, ваша оценка предмета {subject} не соотвествует требуемому формату.')

def see_feedback(subject,result):#Выводит все отзывы на указанный предмет
    print(f'Отзывы на предмет {subject}:')
    if subject not in result:
        print('К сожалению, отзывов на данный предмет нет.')
    for k,o in result.items():
        if k==subject:
            for item in o:
                print(f'Отзыв: {item[1]}, оценка: {item[0]}')

def mean(subject,result):#Выводит среднюю оценку указанного предмета
    print(f'Средняя оценка педмета {subject}:')
    sum=0
    cnt=0
    if subject not in result:
        print('К сожалению, оценок для данного предмета нет.')
    for k,o in result.items():
        if k==subject:
            for item in o:
                sum+=int(item[0])
                cnt+=1
            print(sum/cnt)

def delet(subject,result):#Удаление отзыва
    dict_feedback={}
    if subject not in result:
        print('К сожалению, отзывов на данный предмет нет.')
    for k,o in result.items():
        if k==subject:
            for i,item in zip(range(0,len(o)),o):
                print(f'{i+1}) {item}')
                dict_feedback[str(i+1)]=item
            choice=input('Выберите номер отзыва, который хотите удалить:')
            if 0 < int(choice) <= len(o):
                for n,p in dict_feedback.items():
                    if choice==n:
                        for x in result.copy():
                            if x==subject:
                                print(p)
                                result[x].remove(p)
                                print(f'отзыв под номером {choice} успешно удален.')
            else:
                print('Нет отзыва под таким номером.')

def main():
    while True:
        print('1) Оставить отзыв к предмету \n2) Посмотреть отзывы на предмет \n3) Узнать средний балл предмета \n4) Удалить отзыв')
        operation=input('Введите номер нужной вам операции:')
        if operation=='1':
            subject=input('Введите название предмета учебного курса:').upper()
            rang=input('Введите оценку предмета от 1 до 5:')
            feedback=input('Напишите отзыв на указанный предмет.\n Расскажите о качестве полученных зананий, преподавателе, способе проведения занятия.\n')
            subjects(subject,rang,feedback)
        if operation=='2':
            subject=input('Введите название предмета, на который хотите увидеть отзывы:').upper()
            see_feedback(subject,result)
        if operation=='3':
            subject=input('Введите название предмета, среднюю оценку которого хотите узнать:').upper()
            mean(subject,result)
        if operation=='4':
            subject=input('Введите название предмета, отзыв на который хотите удалить:').upper()
            delet(subject,result)
        else:
            print('Нет функции с таким номером.')
main()