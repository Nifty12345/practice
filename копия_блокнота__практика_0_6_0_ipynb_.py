# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.6.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VfiF6wTaMd9f84Y48DcA0aCviKYYHMlu

---

# **Дисклеймер**

В данной практике будет введен дополнительный критерий: чистота и читаемость кода, а также соблюдение правил описанных в начале практики

---

# Задание 1

**Задача:**

Напишите функцию очищающий список от дубликтов


*Запрещено:*

*   Использовать set() или готовые функции очищающие список от дубликатов

Вввод:

```
apple banana apple 1 3 4 4 5
```


Вывод:

```
apple banana 1 3 4 5
```
"""

def clear_of_duplicates(sentence):#Добавляет уникальные слова в список
    unique_words=[]
    sentence=sentence.split()
    for item in sentence:
        if item not in unique_words:
            unique_words.append(item)
    print(unique_words)


sentence=input('Введите список слов, из которого необходимо удалить дубликаты:')
clear_of_duplicates(sentence)

"""# Задание 2

**Задача:**

Написать функцию для нахождения простых чисел в диапазоне

Ввод:

```
10, 50
```

Вывод:

```
11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47
```
"""

def line(numbers):#Проходится по диапазону и добавлет простые числа в список
    global number_list
    number_list=[]
    numbers=numbers.split(',')
    for number1 in range(int(numbers[0]),int(numbers[1])):
        if prime(number1)==True:
            number_list.append(number1)


def prime(number):#Определяет простое число или нет
    number=int(number)
    cnt=0
    for number2 in range(1,number+1):
        if number%number2==0:
            cnt+=1
    if cnt==2:
        return True
    else:
        return False


numbers=input('Введите диапазон из двух чисел через запятую:')
line(numbers)
print(*number_list)

"""# Задание 3

Напишите функцию для объединения двух списков (список ключей и список значении) в словарь

*Запрещено:*

*   Использования готовых функции для объединения списков (пример: zip() )

Дано:

```
keys = ['a', 'b', 'c', 'e' ]
values = [1, 2, 3, 4]
```

Вывод:
```
{'a': 1, 'b': 2, 'c': 3, 'e': 4}
```



"""

def join(keys,values):#Соединяет ключи и значения
    my_dict={}
    for count in range(len(keys)):
        my_dict[keys[count]]=values[count]
    print(my_dict)


keys = ['a', 'b', 'c', 'e' ]
values = [1, 2, 3, 4]
join(keys,values)





"""# Задание 4

Напишите функцию(ии) для подсчета статистических параметров:
*   Сумму
*   Среднее арифметическое
*   Медиану
*   Моду


*Запрещено:*

*   sum()
*   sorted()
*   и других функции предоставляющих готовое решение задания

Дано:

```
numbers = [1, 2, 2, 3, 4, 5, 6, 7, 8 ,9 ,10]

```

Вывод:
```
{'mean': 5.181818181818182, 'median': 5, 'mode': 2, 'sum': 57}
```

"""

def mean(numbers):#Определяет среднее арифметическое
    sum=0
    for number in numbers:
        number=int(number)
        sum+=number
    return sum/len(numbers)


def median(numbers):#Определяет медиану
    length=len(numbers)//2
    numbers=numbers[length:-length]
    for number in numbers:
        number=number
    return number


def mode(numbers):#Определяет моду
    mode_of_numbers={}
    max_item=0
    for number in numbers:
        mode_of_numbers[number]=numbers.count(number)
    for key,item in mode_of_numbers.items():
        if item>max_item:
            max_item=item
    for key,item in mode_of_numbers.items():
        if item==max_item:
            return key


def sum(numbers):#Определяет сумму
    sum=0
    for number in numbers:
        number=int(number)
        sum+=number
    return sum


numbers = [1, 2, 2, 3, 4, 5, 6, 7, 8 ,9 ,10]
result_dict={}
result_dict['mean']=mean(numbers)
result_dict['median']=median(numbers)
result_dict['mode']=mode(numbers)
result_dict['sum']=sum(numbers)
print(result_dict)

"""# Задание 5

На ввод поступает строка символов. Строка состоит из слов, которые отделены друг от друга пробелами. Необходимо вывести самое длинное слово и его порядковый номер.

*Запрещено:*

*   len()

Дано:

```
Страдание и боль всегда обязательны для широкого сознания и глубокого сердца.

```

Вывод:
```
Самое длинное слово с номером 5: обязательны
```
"""

def long_word(sentence):#Определяет самое длинное слово
    sentence_list=sentence.split()[:-1]
    sentence_dict={}
    cnt=0
    for word in sentence_list:
        for letter in word:
            cnt+=1
        sentence_dict[cnt]=word
        cnt=0
    for key,item in sentence_dict.items():
        if max(sentence_dict)==key:
            return item


def number_of_word(sentence):#Определяет номер этого слова
    sentence_list=sentence.split()[:-1]
    return sentence_list.index(long_word(sentence))+1


sentence='Страдание и боль всегда обязательны для широкого сознания и глубокого\
 сердца.'
print(f'Самое длинное слово с номером {number_of_word(sentence)}: \
{long_word(sentence)}')

"""# Задание 6

Напишите программу, для управления оценками студентов, со следующими функциями:

* Добавление информации о студенте и его оценках.
* Подсчет среднего балла студента.
* Получение списка всех студентов с их средними баллами.
* Поиск студента по имени и вывод его оценок и среднего балла.




"""

student_dict={}


def student(name,grades): #Заносит студентов и их оценки в словарь
    global student_dict
    student_dict[name]=grades.split(',')
    print(f'Студент {name} успешно добавлен(а). Оценки: {grades}.')


def all_students(student_dict): #Выводит список студентов и их средний балл
    print('Список студентов и их средний балл:')
    for key,value in student_dict.items():
        summ=0
        for grade in value:
            summ+=int(grade)
        print(f'Средний балл студента {key}: {summ/len(value)}')


def student_grades(student_dict,student_name): #Выводит все данные о студенте
    for key,value in student_dict.items():
        summ=0
        if key==student_name:
            for grade in value:
                summ+=int(grade)
            print(f'Студент {key}. Оценки: {','.join(str(x) for x in value)}.\
            Средний балл: {summ/len(value)}')
    if student_name not in student_dict:
        print('К сожалению, такой студент не найден.')


def main():#Дает пользователю выбрать функцию
    while True:
        operation=input('Доступны следующие функции: \n \
        1) Добавление информации о студенте и его оценках. \n \
        2) Список студентов и их средних баллов. \n \
        3) Поиск студента по имени и вывод его оценок и среднего балла. \n \
        Выберите номер нужной функции: ')
        if operation=='1':
            name=input('введите имя студента: ')
            grades=input('Введите оценки студентов через запятую: ')
            student(name,grades)
        if operation=='2':
            all_students(student_dict)
        if operation=='3':
            student_name=input('Введите имя нужного студента:')
            student_grades(student_dict,student_name)


main()

"""# Задание 7


**Задача:**

Создайте приложение-викторину с командной строкой, которое задает пользователям вопросы по различным темам и отслеживает их результаты.

Ключевые особенности:

*   Хранение данных о вопросах и ответах на них, а также баллов за каждый вопрос
*   Реализуйте функцию для представления вопросов, принятия ответов пользователей и предоставления обратной связи о том, являются ли ответы правильными или неправильными.
*  После завершения викторины отобразите общий балл пользователя из числа ответов на вопросы.
*  Реализуйте функцию добавления нового вопроса
*  Реализуйте функцию перемешивания вопросов, для отображения случайного вопроса

"""

import random

questions=[['Страна с самой высокой продолжительностью жизни.','КИТАЙ'],\
        ['Новобранец на флоте – это …','САЛАГА'],\
        ['Самая высокая гора в мире.','ЭВЕРЕСТ'],\
        ['Столица Белоруссии.','МИНСК'],\
        ['Главное орудие хоккеиста – это …','КЛЮШКА']]


def rand():#Перемешивает список questions
    random.shuffle(questions)


def quiz(questions):#Проводит викторину
    cnt=len(questions)
    score=0
    rand()
    for question in questions:
        print(f'Вопросов осталось: {cnt}. \nВопрос: {question[0]}')
        answer=input('Введите ответ:').upper()
        if answer==question[1]:
            cnt-=1
            score+=1
            print('Правильный ответ!')
        else:
            cnt-=1
            print('Неправильный ответ.')
    if cnt<1:
        print(f'Ваш счёт: {score}/{len(questions)}')


def new_questions(new_question,answer):#Добавляет новый вопрос
    questions.append([new_question,answer])
    print('Вопрос добавлен!')


def main():#Дает пользователю выбрать функцию
    while True:
        operation=input('Выберите действие: \n 1) Начать игру.\
        2) Добавить свой вопрос. \n')
        if operation=='1':
            quiz(questions)
        if operation=='2':
            new_question=input('Введите вопрос:')
            answer=input('Введите ответ:').upper()
            new_questions(new_question,answer)


main()