# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.4.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ogROJpe5PQFzYOKN8eIdj_kI0wVCPcb2

Введите ваше ФИО:
"""

Лобова Кристина Михайловна

"""***Дисклеймер***

В данной практике запрещено использования функций:


*   sum()
*   min()
*   max()
*   average()
*   reversed()
*   sorted()
*   готовые функции или библиотеки

**Задача 1:**



Интернет-магазин предлагает следующие условия скидок:

*   Для заказов больше 1000 единиц, клиент получает скидку 5%. Если клиент использует промокод SUPERDISCOUNT, он получает скидку 10%.
*  Для заказов стоимостью более 5000 единиц, клиент получает скидку 15%, а использование промокода SUPERDISCOUNT увеличивает скидку до 20%.

Этап 1:
Ввод:
```
Введите стоимость единицы товара: 5
Введите количество товара: 1000
Введите промокод: GiVEMEDISCONT
```

Вывод:

```
Ваша скидка: 5%
Итоговая сумма: 4750.0
```
Этап 2:

Оформите ваш код в виде функции
"""

cost=input('Введите стоимость единицы товара:')
amount=input('Введите количество товара:')
promo=input('Введите промокод:')

def shopping(cost,amount,promo):
    if int(amount)>1000:
        if promo=='SUPERDISCOUNT':
            print('Ваша скидка: 15%')
            print('Итоговая сумма:',((int(cost)*int(amount))*85)/100)
        else:
            print('Ваша скидка: 5%')
            print('Итоговая сумма:',((int(cost)*int(amount))*95)/100)
    if int(amount)>5000:
        if promo=='SUPERDISCOUNT':
            print('Ваша скидка: 20%')
            print('Итоговая сумма:',((int(cost)*int(amount))*80)/100)
        else:
            print('Ваша скидка: 15%')
            print('Итоговая сумма:',((int(cost)*int(amount))*85)/100)
    if int(amount)<=1000:
        if promo=='SUPERDISCOUNT':
            print('Ваша скидка: 10%')
            print('Итоговая сумма:',((int(cost)*int(amount))*90)/100)
        else:
            print('Ваша скидка: 0%')
            print('Итоговая сумма:',(int(cost)*int(amount)))

shopping(cost,amount,promo)

"""**Задача 2:**

Этап 1:
Напишите программу способную отфильтровать список и вывести только положительные элементы


Ввод:
```
-1 5 1 2 -3
```

Вывод:

```
5 1 2
```

Этап 2:

Оформите ваш код в виде функции
"""

spisok=input('Введите произвольный список любых положительных и отрицательных чисел через запятую:')
spisok=spisok.split(',')

def filter(spisok):
    filter_spisok=''
    for numb in spisok:
        numb=int(numb)
        if '-' not in str(numb):
            filter_spisok+=str(numb)+' '
    return filter_spisok

print(filter(spisok))

"""**Задача 3:**

Этап 1:
Напишите программу реализующую Алгоритм Евклида


> Алгоритм Евклида – это алгоритм нахождения наибольшего общего делителя (НОД) пары целых чисел.



Ввод:
```
30 18
```

Вывод:

```
6
```

Этап 2:
Оформите ваш код в виде функции

"""

num1=input('Введите первое число:')
num2=input('Введите второе число:')
def Evklid(a,b):
    while a!=0 and b!=0:
        a=int(a)
        b=int(b)
        if a>=b:
            a=a%b
        else:
            b=b%a
    if a>b:
        return a
    if a<b:
        return b

print(Evklid(num1,num2))

"""**Задача 4:**

Этап 1:
Напишите функцию программу, которая принимает строку и возвращает список слов и количество их упомнинаний в предложении

Этап 2:
Оформите ваш код в виде функции

Ввод:
```
apple banana apple
```

Вывод:

```
apple: 2,
banana: 1
```
"""

stroka=input('Введите предложение:')
stroka_spisok=stroka.split()
def words(a):
    all_words=set(a)
    cnt=0
    for word in all_words:
        for word2 in stroka_spisok:
            if word==word2:
                cnt+=1
        print(word,cnt)
        cnt=0
words(stroka_spisok)

"""**Задача 5:**

Этап 1:
Детектор анаграмм Напишите программу на Python, которая принимает в качестве входных данных две строки и проверяет, являются ли они анаграммами друг друга

Этап 2:
Оформите ваш код в виде функции

Ввод:
```
listen, silent
```

Вывод:

```
True
```
"""

def anagramma(a,b):
    spisok1=[]
    spisok2=[]
    cnt=0
    if len(a)==len(b):
        for letter1 in a:
            spisok1.append(letter1)
        for letter2 in b:
            spisok2.append(letter2)
        for letter in range(0, len(a)):
            if spisok1.count(a[letter])==spisok2.count(a[letter]):
                cnt+=1
        if cnt==int(len(a)):
            print('True')
        else:
            print('False')
    else:
        print('False')

word1=input("Введите первое слово:")
word2=input("Введите второе слово:")
anagramma(word1,word2)

"""**Задача 5:**

Шифр ​​Цезаря

Напишите программу на Python, которая реализует шифр Цезаря, простой метод шифрования, который заменяет каждую букву буквой на фиксированное количество позиций вниз по алфавиту. Программа должна запрашивать у пользователя сообщение и значение сдвига, а затем шифровать и расшифровывать сообщение.

Этап 1:

Напишите код для реализации данной задачи

Этап 2:

Оформите код в виде нескольких функций:

* Зашифровывает сообщение
* Расшифровывает сообщение
"""

def Cezar(a,b):
    if len(b)==1 and '1' in b:
        code=[]
        new_sentence=''
        for letter in a:
            code.append(letter)
        for elem in code:
            if elem in alphabet:
                ind=alphabet.find(elem)
                ind2=code.index(elem)
                code[ind2]=alphabet[ind+3]
                new_sentence+=code[ind2]
            else:
                new_sentence+=elem
        return new_sentence
    if len(b)==1 and '2' in b:
        decode=[]
        new_sentence=''
        for letter in a:
            decode.append(letter)
        for elem in decode:
            if elem in alphabet:
                ind=alphabet.find(elem)
                ind2=decode.index(elem)
                decode[ind2]=alphabet[ind-3]
                new_sentence+=decode[ind2]
            else:
                new_sentence+=elem
        return new_sentence

alphabet='АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ'
sentence=input('Введите предложение на русском языке:').upper()
request=input('Выберете нужную фунцуию, указав соответсвующую цифру: \n 1) Зашифровать \n 2) Дешифровать \n')
print(Cezar(sentence,request))

"""**Задача 6**

Задача: «Банковская система»

Создайте программу Python, которая имитирует базовую банковскую систему. Система должна иметь следующие функции:

Требования
*   Система должна позволять клиентам создавать счета и хранить их балансы.
*   Система должна позволять клиентам вносить и снимать деньги со своих счетов.
*   Система должна позволять клиентам проверять свой текущий баланс.
*   Система должна позволять клиентам переводить деньги между счетами.
*   Система должна отслеживать транзакции (депозиты, снятия и переводы) и иметь возможность печатать детали транзакций.


Задачи
1. Реализуйте банковскую систему, используя только базовые конструкции Python, такие как def, lists, if, elif и else, без классов или словарей.
Определите функции для создания счетов, внесения и снятия денег, получения балансов счетов, перевода денег между счетами, а также создания и печати транзакций.
2. Напишите основную функцию, которая демонстрирует использование банковской системы путем создания счетов, внесения и снятия денег и перевода денег между счетами.
3. Бонусное задание
Реализуйте способ хранения и печати истории транзакций для каждого счета.

Ограничения
Не используйте классы или словари.
Используйте только базовые конструкции Python, такие как def, lists, if, elif и else.

"""

print('Добро пожаловать! Наша банковская система обладает следующими функциями:')
all_accounts=[]
transactions=[]

def accounts():
    account_id=len(all_accounts)
    all_accounts.append(0)
    print(f'Счет создан! Номер счета: {account_id+1}')
    transactions.append(f'Счет создан! Номер счета: ({account_id+1})')

def contribute(account_id,amount):
    if 0 < int(account_id) <= len(all_accounts):
        all_accounts[int(account_id)-1]+=int(amount)
        print(f'Внесено ${amount} на счет {account_id}. Текущий баланс: ${all_accounts[int(account_id)-1]}')
    else:
        print('Кажется, счета с таким номером не существует, как досадно.')
    transactions.append(f'Внесено ${amount} на счет ({account_id}).')

def withdraw(account_id,amount):
    if 0 < int(account_id) <= len(all_accounts) and 0 < int(amount) <= all_accounts[int(account_id)-1]:
        all_accounts[int(account_id)-1]-=int(amount)
        print(f'Снято ${amount} cо счета {account_id}. Текущий баланс: ${all_accounts[int(account_id)-1]}')
    else:
        print('Кажется, счета с таким номером не существует или у вас недостаточно денег на счету для снятия такой суммы.')
    transactions.append(f'Снято ${amount} cо счета ({account_id}).')

def balance(account_id):
    if 0 < int(account_id) <= len(all_accounts):
        print(f'Баланс счета {account_id}: ${all_accounts[int(account_id)-1]}')
    else:
        print('Кажется, счета с таким номером не существует.')
    transactions.append(f'Запрошен баланс счета ({account_id}).')

def transfer(account_id_1,account_id_2,amount):
    if 0 < int(account_id_1) <= len(all_accounts) and 0 < int(amount) <= all_accounts[int(account_id_1)-1] and 0 < int(account_id_2) <= len(all_accounts):
        all_accounts[int(account_id_1)-1]-=int(amount)
        all_accounts[int(account_id_2)-1]+=int(amount)
        print(f'Перевод со счета {account_id_1} на счет {account_id_2} выполнен успешно. \n Текущий баланс счета {account_id_1}: ${ all_accounts[int(account_id_1)-1]} \n Текущий баланс счета {account_id_2}: ${ all_accounts[int(account_id_2)-1]}')
    else:
        print(f'Кажется, счета(счетов) с таким номером не существует или у вас недостаточно денег на счете {account_id_1} для снятия такой суммы.')
    transactions.append(f'Перевод со счета ({account_id_1}) на счет ({account_id_2}) выполнен успешно. Сумма перевода: ${amount}')

def all_transacts(transactions):
    for transaction in transactions:
        transaction=transaction.replace('(','')
        transaction=transaction.replace(')','')
        print(transaction)

def specific_transact(transactions,all_accounts,account_id):
    if 0 < int(account_id) <= len(all_accounts):
        for transaction in transactions:
            if '('+account_id+')' in transaction:
                transaction=transaction.replace('(','')
                transaction=transaction.replace(')','')
                print(transaction)
    else:
        print(f'Кажется, счета с таким номером не существует.')

def main():
    while True:
        print('1) Создание счета \n2) Внести деньги \n3) Снять деньги \
        \n4) Проверить баланс \n5) Перевести деньги между счетами \n6) Печать транзакций')
        operation=input('Введите номер нужной вам операции:')
        if operation=='1':
            accounts()
        if operation=='2':
            account_id=input('Введите номер счета:')
            amount=input('Введите сумму,которую хотите положить на счет:')
            contribute(account_id,amount)
        if operation=='3':
            account_id=input('Введите номер счета:')
            amount=input('Введите сумму,которую хотите снять со счета:')
            withdraw(account_id,amount)
        if operation=='4':
            account_id=input('Введите номер счета:')
            balance(account_id)
        if operation=='5':
            account_id_1=input('Введите номер счета, с которого хотите сделать перевод:')
            account_id_2=input('Введите номер второго аккаунта, на который хотите перевести:')
            amount=input('Введите сумму,которую хотите перевести:')
            transfer(account_id_1,account_id_2,amount)
        if operation=='6':
            choice=input('Вы хотите посмотреть все транзакции или транзакции одного из счетов? \n 1) Все трназакции. \n 2) Транзакции одного из счетов.\n')
            if choice=='1':
                all_transacts(transactions)
            if choice=='2':
                account_id=input('Введите номер счета, для которого хотите узнать историю транзакций:')
                specific_transact(transactions,all_accounts,account_id)
        else:
          print('Такой операции нет.')
main()