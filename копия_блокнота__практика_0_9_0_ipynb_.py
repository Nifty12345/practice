# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.9.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x33dNPhr77T7ZSnXu_asxanrBtbGGJIL

ФИО
"""

# Лобова Кристина Михайловна

"""# Дисклеймер

В данной практике вам необходимо применить все ваши знания по темам:

- Функции
- Словари
- Списки
- Множества
- Условные конструкции
- Запросы

и все что было изучено на прошлых практических занятиях

В каждом задании кратко описаны функции, которые необходимо реализовать, детали реализации вы должны продумать самостоятельно

# Задание 0

Создайте функцию по нахождению уникальных элементов из двух списков



```
a = [1, 2, 3, 4]
b = [3, 4, 5, 6]
```
"""

a = [1, 2, 3, 4]
b = [3, 4, 5, 6]


def get_comparison():
  for i in a:
    for j in b:
      if i==j:
        print(f'В списках а и b совпадают элементы: {i}')


get_comparison()

"""# Задание 1

Симулятор виртуального питомца

Цель: создать виртуальный симулятор домашних животных, в котором пользователи смогут заводить питомцев и ухаживать за ними.

Требования:

- Функция для усыновления питомца (имя, тип, возраст).
- Функция для того, чтобы покормить питомца, поиграть с ним или уложить его спать.
- Функция для отображения состояния питомца (голод, радость, энергия).
"""

import random


def main():
    cnt = 0
    print('Добро пожаловать! Создайте своего питомца:')
    pet_name = input('Имя питомца: ')
    pet_type = input('Тип питомца: ')
    try:
        pet_age = int(input('Возраст питомца в формате чисел: '))
        print(f'Питомец создан! Имя: {pet_name}, тип: {pet_type}, \
возраст: {pet_age}')
        while True:
            mood = ['радость','энергия']
            if cnt < 3:
                print(f'{pet_name}. Состояние: {random.choice(mood)}')
            else:
                print(f'{pet_name}. Состояние: голод')
            choice_act=input(f'Чем вы хотите заняться с питомцем: {pet_name}?\n\
1) Поиграть\n2) Покормить\n3) Уложить спать\n')
            if choice_act in ['1', '2', '3']:
                if choice_act == '1':
                    cnt += 1
                    print(f'Вы поиграли с питомцем: {pet_name}.')
                if choice_act == '2':
                    cnt=0
                    print(f'Вы покрмили питомца: {pet_name}.')
                if choice_act == '3':
                    cnt += 1
                    print(f'Вы уложили спать питомца: {pet_name}.')
                    wake_up = input('Ведите "разбудить", \
чтобы разбудить: ').upper()
                    while wake_up != 'РАЗБУДИТЬ':
                        print('Он все еще спит.')
                        wake_up = input('Ведите "разбудить", \
чтобы разбудить: ').upper()
                        continue
                if cnt == 5:
                    print(f'О нет! Кажется, {pet_type} {pet_name} \
умер от голода!\nКто же знал, что питомцев надо кормить?')
                    break
    except:
        exit('Неправильный формат введения возраста!')


main()

"""# Задание 2

Рыцарь и дракон

Цель: создать небольшую игру, в которой вам необходимо играть за рыцаря и сразиться с драконом

Требования:

- Создание персонажа (имя, информация о доспехах, оружии, урон, здоровье)
- Управление персонажем и мини сюжет
- Создание дракона (Имя, информация о здоровье и уроне)
- Боевая система (нанесение и получение урона, урон должен быть случайным в заданном диапазоне)
- Реализовать бой между драконом и рыцарем
"""

import random


# Создание персонажа
def create_hero():
    coins = 5
    hero_name = input('Имя героя: ').upper()
    print(f'Монет на счету: {coins}.\nДоспехи героя: ')
    armor = input('Выберите вид доспеха:\n\
1) Кожаная: +5 к защите - 1 монета\n\
2) Кольчужная: +7 к защите - 2 монеты\n\
3) Железная броня: +10 к защите - 3 монеты\n')
    if armor in ['1', '2', '3']:
        if armor == '1':
            hero_armor = 'кожаные'
            hero_def = 5
        elif armor == '2':
            hero_armor = 'кольчужные'
            hero_def = 7
        elif armor == '3':
            hero_armor = 'железные'
            hero_def = 10
    else:
        exit('Нет такой брони!')
    weapon = input(f'Монет на счету: {coins - int(armor)}.\n\
Выберите вид оружия:\n\
1) Палка: +10 к атаке - 1 монета\n\
2) Рогатка: +20 к атаке - 2 монеты\n\
3) Меч: +30 к атаке - 3 монеты\n')
    if weapon in ['1', '2', '3']:
        if weapon == '1':
            hero_weapon = 'палка'
            hero_damage = 10
        elif weapon == '2':
            hero_weapon = 'рогатка'
            hero_damage = 20
        elif weapon == '3':
            hero_weapon = 'меч'
            hero_damage = 30
    else:
        exit('Нет такого оружия!')
    if coins - int(armor) - int(weapon) < 0:
        exit('Вы превысили бюджет! Сборщики дани конфисковали ваших родных.')
    else:
        health = [50, 70, 90, 100]
        hero_health = random.choice(health)
        print(f'Имя: {hero_name}, доспехи: {hero_armor}, оружие: {hero_weapon},\
 защита: {hero_def}, атака: {hero_damage}, здоровье: {hero_health}.')
        return [hero_name, hero_armor, hero_def, \
                hero_weapon, hero_damage, hero_health]


# Создание дракона
def imagine_dragon():
    names = ['Фламберг', 'Загрей', 'Алый', 'Вихрь', 'Багровый']
    dragon_name = random.choice(names)
    health = [100, 150, 200]
    dragon_health = random.choice(health)
    damage = [10, 12, 15]
    dragon_damage = random.choice(damage)
    print(f'Дракон: {dragon_name}, здоровье: {dragon_health}, урон: {dragon_damage}.')
    return [dragon_name, dragon_health, dragon_damage]


# Битва
def fight(hero, dragon):
    print(f'В средневековой деревне жили добрые и трудолюбивые люди, выращивавшие пшеницу и разводившие овец.\n\
Однажды на деревню напал дракон {dragon[0]}, и люди в ужасе бежали.\n\
Вы, доблестный рыцарь {hero[0]}, на коне бросились на помощь.')
    while hero[5] > 0 and dragon[1] > 0:
        choice = input('Что вы сделаете?\n\
1) Атаковать\n2) Увернуться\n')
        if choice in ['1', '2']:
            next_move = ['dragon_attack', 'hero_attack']
            current_move = random.choice(next_move)  # Рандомный выбор, кто ходит: дракон или игрок
            if current_move == 'dragon_attack' and choice == '1':  # Ход дракона, игрок атакует
                print(f'Дракон прервал вашу атаку и нанес вам урон! Ваша защита не засчитана.\n\
Нанесенный дракона урон: {dragon[2]}, ваше здоровье: {hero[5] - dragon[2]}, здоровье дракона: {dragon[1]}')
                hero[5] -= dragon[2]
            elif current_move == 'dragon_attack' and choice == '2':  # Ход дракона, игрок защищается
                print(f'Вы защитились от атаки дракона! Ваша защита засчитана.\n\
Нанесенный драконом урон: {dragon[2] - hero[2]}, ваше здоровье: {hero[5] - (dragon[2] - hero[2])}, здоровье дракона: {dragon[1]}')
                hero[5] -= (dragon[2] - hero[2])
            elif current_move == 'hero_attack' and choice == '1':  # Ход игрока, игрок атакует
                print(f'Вы нанесли урон дракону!\n\
Нанесенный вами урон: {hero[4]}, ваше здоровье: {hero[5]}, здоровье дракона: {dragon[1] - hero[4]}')
                dragon[1] -= hero[4]
            elif current_move == 'hero_attack' and choice == '2':  # Ход игрока, игрок защищается
                print(f'Вы пропустили свою атаку! Урона не нанесено.\n\
Нанесенный урон: 0, ваше здоровье: {hero[5]}, здоровье дракона: {dragon[1]}')
    if hero[5] <= 0:
        print(f'Победил дракон {dragon[0]}!')
    elif dragon[1] <= 0:
        print(f'Победил рыцарь {hero[0]}!')


hero = create_hero()
dragon = imagine_dragon()
fight(hero, dragon)

"""# Задание 3

Цель - создать менеджера команды Pokémon, который позволит пользователям:

- Добавлять покемонов в свою команду. (если такого покемона еще нет в команде)
- Удалять покемонов из их команды.
- Просматривать подробную информацию обо всех покемонах в команде.
- Находить покемона по имени.
- Устраивать тренировочный бой между двумя покемонами

Для данной задачи используйте: https://pokeapi.co/
"""

import requests

# Добавляет покемона в команду
def add_pokemon(team, pokemon_name):
    if pokemon_name in team:
        print(f"Покемон {pokemon_name} уже есть в вашей команде.")
    else:
        url = f"https://pokeapi.co/api/v2/pokemon/{pokemon_name}"
        response = requests.get(url)
        if response.status_code == 200:
            json = response.json()
            team[pokemon_name] = {
                "name": json["name"],
                "types": [type_["type"]["name"] for type_ in json["types"]],
                "stats": {stat["stat"]["name"]: stat["base_stat"] for stat in json["stats"]}
            }
            print(f"Покемон {pokemon_name} успешно добавлен в вашу команду.")
        else:
            print(f"Не удалось найти покемона с именем {pokemon_name}.")

# Удаляет покемона из команды
def delete_pokemon(team, pokemon_name):
    if pokemon_name in team:
        del team[pokemon_name]
        print('Покемон успешно удален.')
    else:
        print('Такого покемона нет в команде.')

# Показывает подробную информацию обо всех покемонах в команде
def show_team_information(team):
    if len(team) != 0:
        for stats_values in team.values():
            print(f'\nName: {stats_values['name']}')
            print(f'Types: {','.join(stats_values['types'])}')
            for stat, stat_value in stats_values['stats'].items():
                print(f'{stat}: {stat_value}')
    else:
        print('Ваша команда пока пустая.')

# Показывает подробную информацию о запрошенном покемоне из команды
def find_pokemon(team, pokemon_name):
    if pokemon_name in team:
        stats = team[pokemon_name]
        print(f'Name: {stats["name"]}')
        print(f'Types: {", ".join(stats["types"])}')
        for stat, stat_value in stats['stats'].items():
            print(f'{stat}: {stat_value}')
    else:
        print('Такого покемона нет в вашей команде.')

# Тренировочный бой
def start_battle(team, pokemon_name1, pokemon_name2):
    if pokemon_name1 in team and pokemon_name2 in team:
        sum_stats_pokemon1 = sum(team[pokemon_name1]["stats"].values())
        sum_stats_pokemon2 = sum(team[pokemon_name2]["stats"].values())
        if sum_stats_pokemon1 > sum_stats_pokemon2:
            print(f'Победил покемон {pokemon_name1}!')
        if sum_stats_pokemon1 < sum_stats_pokemon2:
            print(f'Победил покемон {pokemon_name2}!')
        if sum_stats_pokemon1 == sum_stats_pokemon2:
            print('Ничья.')
    else:
        print('Кажется, одного или двух покемонов в вашей команде нет.')


def main():
    team = {}
    while True:
        choice=input('Выберите действие:\n'
                    '1) Добавить покемона в команду\n'
                    '2) Убрать покемона из команды\n'
                    '3) Подробная информация обо всех покемонах в команде\n'
                    '4) Найти покемона в по имени\n'
                    '5) Тренировочный бой\n'
                    '6) Выход\n'
                    )
        if choice == '1':
            pokemon_name = input('Введите имя покемона: ').lower()
            add_pokemon(team, pokemon_name)
        if choice == '2':
            pokemon_name = input('Введите имя покемона, '
            'которого хотите удалить: ').lower()
            delete_pokemon(team, pokemon_name)
        if choice == '3':
            show_team_information(team)
        if choice == '4':
            pokemon_name = input('Введите имя покемона, '
            'которого хотите найти: ').lower()
            find_pokemon(team, pokemon_name)
        if choice == '5':
            print('Ваши покемоны:')
            print(*[pokemon for pokemon in team])
            pokemon_name1 = input('Выберите первого покемона: ').lower()
            pokemon_name2 = input('Выберите второго покемона: ').lower()
            start_battle(team, pokemon_name1, pokemon_name2)
        if choice == '6':
            exit('Сеанс завершен.')


main()